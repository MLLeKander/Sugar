#!/usr/bin/tail -n+2
# BOOST_PP_VARIADICS 1
#include <boost/preprocessor.hpp>
# B(a) BOOST_PP_##a
# IF B(IF)
# EQ B(EQUAL)
# LEN B(VARIADIC_SIZE)

# new_2(a,b) a b = new a
# new_3(a,b,c) a[] b = new a[c]
# new_4(a,b,c,d) a[][] b = new a[c][d]
# new(a...) B(OVERLOAD)(new_,a)(a)

# println(x) System.out.println(x)
# print(x) System.out.print(x)
# printf(x...) System.out.printf(x)
# eprintln(x) System.err.__println(x)
# eprint(x) System.err.__print(x)
# eprintf(x...) System.err.__printf(x)

# scan_one(a,b) scan.next##b()
# scan_MACRO(r,d,i,e) B(COMMA_IF)(i) e = d
# scan_all(a,b,c...) a B(SEQ_FOR_EACH_I) \
  (scan_MACRO, scan_one(a,b), B(VARIADIC_TO_SEQ)(c))
# scan(a...) IF(EQ(LEN(a),2), scan_one,scan_all)(a)

# int(a...) scan(int,Int,##a)
# str(a...) scan(String,,##a)
# line(a...) scan(String,Line,##a)
# double(a...) scan(double,Double,##a)
# long(a...) scan(long,Long,##a)

# for_1(a) for (a)
# for_2(a,b) for_(a,0,b,a++)
# for_3(a,b,c) for_(a,c,b,a++)
# for_4(a,b,c,d) for_(a,c,b,a--)
# for_(a,b,c,d) for (int a = b; a < c; d)
# for(a...) B(OVERLOAD)(for_,a)(a)

# ats(a...) Arrays.toString(a)
# BI BigInteger
# swap(a,b) a=a^b^(b=a)

# CLS

import java.util.*;
import java.io.*;
import java.math.*;
