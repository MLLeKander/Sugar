#!/bin/bash
set -e
[ "$#" -gt 0 ] && BASE=${1%.*} || BASE=Main
G=${BASE}.gcj
J=${BASE}.java

function sugarc {
  shead
  grep $G -e '^ *import' | cat
  echo "public class $BASE {"
  echo '  public static final BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));'
  echo '  public static final PrintWriter outWriter = new PrintWriter(System.out);'

  grep $G -v -e '^ *import' | \
    spy | \
    sed -E 's;^\{;Object solve() {;;
            s;^class ([^ {<]*).*\{;\0\n#undef CLS\n#define CLS \1;;
            s;^[^ {}#@/];public static \0;;
            s;^  (\(.*?\));  CLS\1;;   #SPACE!
            s;^  %;  private ;;        #SPACE!
            s;^  \.;  public ;;        #SPACE!
            s;^;  ;;'

  echo '  public static void main(String[] args) {'
  echo '    int T = nextInt();'
  echo '    for (int i = 0; i < T; i++) {'
  echo '      print("Case #"+(i+1)+": ");'
  echo '      Object tmp = solve();'
  echo '      if (tmp != null) { println(tmp); }'
  echo '    }'
  echo '    flush();'
  echo '  }'
  echo '  public static StringTokenizer tokenizer = null;'
  echo '  public static String nextLine() {'
  echo '    try { return buffer.readLine(); } catch (IOException e) { throw new UncheckedIOException(e); }'
  echo '  }'
  echo '  public static String next() {'
  echo '    while (tokenizer == null || !tokenizer.hasMoreElements()) { tokenizer = new StringTokenizer(nextLine()); }'
  echo '    return tokenizer.nextToken();'
  echo '  }'
  echo '  public static int nextInt() { return Integer.parseInt(next()); }'
  echo '  public static long nextLong() { return Long.parseLong(next()); }'
  echo '  public static double nextDouble() { return Double.parseDouble(next()); }'
  echo '}'
}

[ -e $G ] || (echo $G not found... && false)

sugarc | tee /tmp/${BASE}.raw | cpp -P | sed 's/__//g; s/></,/g' > $J
myjavac $J #|| (cat -n $J && false)
echo Running... 1>&2
time myjava $BASE #|| (cat -n $J && false)
